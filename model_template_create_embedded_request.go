/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"os"
)

// checks if the TemplateCreateEmbeddedRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TemplateCreateEmbeddedRequest{}

// TemplateCreateEmbeddedRequest struct for TemplateCreateEmbeddedRequest
type TemplateCreateEmbeddedRequest struct {
	// Use `files[]` to indicate the uploaded file(s) to send for signature.  This endpoint requires either **files** or **file_urls[]**, but not both.
	Files []*os.File `json:"files,omitempty"`
	// Use `file_urls[]` to have Dropbox Sign download the file(s) to send for signature.  This endpoint requires either **files** or **file_urls[]**, but not both.
	FileUrls []string `json:"file_urls,omitempty"`
	// This allows the requester to specify whether the user is allowed to provide email addresses to CC when creating a template.
	AllowCcs *bool `json:"allow_ccs,omitempty"`
	// Allows signers to reassign their signature requests to other signers if set to `true`. Defaults to `false`.  **Note**: Only available for Premium plan and higher.
	AllowReassign *bool `json:"allow_reassign,omitempty"`
	// A list describing the attachments
	Attachments []SubAttachment `json:"attachments,omitempty"`
	// The CC roles that must be assigned when using the template to send a signature request
	CcRoles []string `json:"cc_roles,omitempty"`
	// Client id of the app you're using to create this draft. Used to apply the branding and callback url defined for the app.
	ClientId string `json:"client_id"`
	EditorOptions *SubEditorOptions `json:"editor_options,omitempty"`
	FieldOptions *SubFieldOptions `json:"field_options,omitempty"`
	// Provide users the ability to review/edit the template signer roles.
	ForceSignerRoles *bool `json:"force_signer_roles,omitempty"`
	// Provide users the ability to review/edit the template subject and message.
	ForceSubjectMessage *bool `json:"force_subject_message,omitempty"`
	// Group information for fields defined in `form_fields_per_document`. String-indexed JSON array with `group_label` and `requirement` keys. `form_fields_per_document` must contain fields referencing a group defined in `form_field_groups`.
	FormFieldGroups []SubFormFieldGroup `json:"form_field_groups,omitempty"`
	// Conditional Logic rules for fields defined in `form_fields_per_document`.
	FormFieldRules []SubFormFieldRule `json:"form_field_rules,omitempty"`
	// The fields that should appear on the document, expressed as an array of objects. (For more details you can read about it here: [Using Form Fields per Document](/docs/openapi/form-fields-per-document).)  **NOTE**: Fields like **text**, **dropdown**, **checkbox**, **radio**, and **hyperlink** have additional required and optional parameters. Check out the list of [additional parameters](/api/reference/constants/#form-fields-per-document) for these field types.  * Text Field use `SubFormFieldsPerDocumentText` * Dropdown Field use `SubFormFieldsPerDocumentDropdown` * Hyperlink Field use `SubFormFieldsPerDocumentHyperlink` * Checkbox Field use `SubFormFieldsPerDocumentCheckbox` * Radio Field use `SubFormFieldsPerDocumentRadio` * Signature Field use `SubFormFieldsPerDocumentSignature` * Date Signed Field use `SubFormFieldsPerDocumentDateSigned` * Initials Field use `SubFormFieldsPerDocumentInitials` * Text Merge Field use `SubFormFieldsPerDocumentTextMerge` * Checkbox Merge Field use `SubFormFieldsPerDocumentCheckboxMerge`
	FormFieldsPerDocument []SubFormFieldsPerDocumentBase `json:"form_fields_per_document,omitempty"`
	// Add merge fields to the template. Merge fields are placed by the user creating the template and used to pre-fill data by passing values into signature requests with the `custom_fields` parameter. If the signature request using that template *does not* pass a value into a merge field, then an empty field remains in the document.
	MergeFields []SubMergeField `json:"merge_fields,omitempty"`
	// The default template email message.
	Message *string `json:"message,omitempty"`
	// Key-value data that should be attached to the signature request. This metadata is included in all API responses and events involving the signature request. For example, use the metadata field to store a signer's order number for look up when receiving events for the signature request.  Each request can include up to 10 metadata keys (or 50 nested metadata keys), with key names up to 40 characters long and values up to 1000 characters long.
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// This allows the requester to enable the editor/preview experience.  - `show_preview=true`: Allows requesters to enable the editor/preview experience. - `show_preview=false`: Allows requesters to disable the editor/preview experience.
	ShowPreview *bool `json:"show_preview,omitempty"`
	// When only one step remains in the signature request process and this parameter is set to `false` then the progress stepper will be hidden.
	ShowProgressStepper *bool `json:"show_progress_stepper,omitempty"`
	// An array of the designated signer roles that must be specified when sending a SignatureRequest using this Template.
	SignerRoles []SubTemplateRole `json:"signer_roles,omitempty"`
	// Disables the \"Me (Now)\" option for the person preparing the document. Does not work with type `send_document`. Defaults to `false`.
	SkipMeNow *bool `json:"skip_me_now,omitempty"`
	// The template title (alias).
	Subject *string `json:"subject,omitempty"`
	// Whether this is a test, the signature request created from this draft will not be legally binding if set to `true`. Defaults to `false`.
	TestMode *bool `json:"test_mode,omitempty"`
	// The title you want to assign to the SignatureRequest.
	Title *string `json:"title,omitempty"`
	// Enable the detection of predefined PDF fields by setting the `use_preexisting_fields` to `true` (defaults to disabled, or `false`).
	UsePreexistingFields *bool `json:"use_preexisting_fields,omitempty"`
}

// NewTemplateCreateEmbeddedRequest instantiates a new TemplateCreateEmbeddedRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTemplateCreateEmbeddedRequest(clientId string) *TemplateCreateEmbeddedRequest {
	this := TemplateCreateEmbeddedRequest{}
	var allowCcs bool = true
	this.AllowCcs = &allowCcs
	var allowReassign bool = false
	this.AllowReassign = &allowReassign
	this.ClientId = clientId
	var forceSignerRoles bool = false
	this.ForceSignerRoles = &forceSignerRoles
	var forceSubjectMessage bool = false
	this.ForceSubjectMessage = &forceSubjectMessage
	var showPreview bool = false
	this.ShowPreview = &showPreview
	var showProgressStepper bool = true
	this.ShowProgressStepper = &showProgressStepper
	var skipMeNow bool = false
	this.SkipMeNow = &skipMeNow
	var testMode bool = false
	this.TestMode = &testMode
	var usePreexistingFields bool = false
	this.UsePreexistingFields = &usePreexistingFields
	return &this
}

// NewTemplateCreateEmbeddedRequestWithDefaults instantiates a new TemplateCreateEmbeddedRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTemplateCreateEmbeddedRequestWithDefaults() *TemplateCreateEmbeddedRequest {
	this := TemplateCreateEmbeddedRequest{}
	var allowCcs bool = true
	this.AllowCcs = &allowCcs
	var allowReassign bool = false
	this.AllowReassign = &allowReassign
	var forceSignerRoles bool = false
	this.ForceSignerRoles = &forceSignerRoles
	var forceSubjectMessage bool = false
	this.ForceSubjectMessage = &forceSubjectMessage
	var showPreview bool = false
	this.ShowPreview = &showPreview
	var showProgressStepper bool = true
	this.ShowProgressStepper = &showProgressStepper
	var skipMeNow bool = false
	this.SkipMeNow = &skipMeNow
	var testMode bool = false
	this.TestMode = &testMode
	var usePreexistingFields bool = false
	this.UsePreexistingFields = &usePreexistingFields
	return &this
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetFiles() []*os.File {
	if o == nil || IsNil(o.Files) {
		var ret []*os.File
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetFilesOk() ([]*os.File, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []*os.File and assigns it to the Files field.
func (o *TemplateCreateEmbeddedRequest) SetFiles(v []*os.File) {
	o.Files = v
}

// GetFileUrls returns the FileUrls field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetFileUrls() []string {
	if o == nil || IsNil(o.FileUrls) {
		var ret []string
		return ret
	}
	return o.FileUrls
}

// GetFileUrlsOk returns a tuple with the FileUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetFileUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileUrls) {
		return nil, false
	}
	return o.FileUrls, true
}

// HasFileUrls returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasFileUrls() bool {
	if o != nil && !IsNil(o.FileUrls) {
		return true
	}

	return false
}

// SetFileUrls gets a reference to the given []string and assigns it to the FileUrls field.
func (o *TemplateCreateEmbeddedRequest) SetFileUrls(v []string) {
	o.FileUrls = v
}

// GetAllowCcs returns the AllowCcs field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetAllowCcs() bool {
	if o == nil || IsNil(o.AllowCcs) {
		var ret bool
		return ret
	}
	return *o.AllowCcs
}

// GetAllowCcsOk returns a tuple with the AllowCcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetAllowCcsOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowCcs) {
		return nil, false
	}
	return o.AllowCcs, true
}

// HasAllowCcs returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasAllowCcs() bool {
	if o != nil && !IsNil(o.AllowCcs) {
		return true
	}

	return false
}

// SetAllowCcs gets a reference to the given bool and assigns it to the AllowCcs field.
func (o *TemplateCreateEmbeddedRequest) SetAllowCcs(v bool) {
	o.AllowCcs = &v
}

// GetAllowReassign returns the AllowReassign field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetAllowReassign() bool {
	if o == nil || IsNil(o.AllowReassign) {
		var ret bool
		return ret
	}
	return *o.AllowReassign
}

// GetAllowReassignOk returns a tuple with the AllowReassign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetAllowReassignOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowReassign) {
		return nil, false
	}
	return o.AllowReassign, true
}

// HasAllowReassign returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasAllowReassign() bool {
	if o != nil && !IsNil(o.AllowReassign) {
		return true
	}

	return false
}

// SetAllowReassign gets a reference to the given bool and assigns it to the AllowReassign field.
func (o *TemplateCreateEmbeddedRequest) SetAllowReassign(v bool) {
	o.AllowReassign = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetAttachments() []SubAttachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []SubAttachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetAttachmentsOk() ([]SubAttachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []SubAttachment and assigns it to the Attachments field.
func (o *TemplateCreateEmbeddedRequest) SetAttachments(v []SubAttachment) {
	o.Attachments = v
}

// GetCcRoles returns the CcRoles field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetCcRoles() []string {
	if o == nil || IsNil(o.CcRoles) {
		var ret []string
		return ret
	}
	return o.CcRoles
}

// GetCcRolesOk returns a tuple with the CcRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetCcRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.CcRoles) {
		return nil, false
	}
	return o.CcRoles, true
}

// HasCcRoles returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasCcRoles() bool {
	if o != nil && !IsNil(o.CcRoles) {
		return true
	}

	return false
}

// SetCcRoles gets a reference to the given []string and assigns it to the CcRoles field.
func (o *TemplateCreateEmbeddedRequest) SetCcRoles(v []string) {
	o.CcRoles = v
}

// GetClientId returns the ClientId field value
func (o *TemplateCreateEmbeddedRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *TemplateCreateEmbeddedRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetEditorOptions returns the EditorOptions field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetEditorOptions() SubEditorOptions {
	if o == nil || IsNil(o.EditorOptions) {
		var ret SubEditorOptions
		return ret
	}
	return *o.EditorOptions
}

// GetEditorOptionsOk returns a tuple with the EditorOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetEditorOptionsOk() (*SubEditorOptions, bool) {
	if o == nil || IsNil(o.EditorOptions) {
		return nil, false
	}
	return o.EditorOptions, true
}

// HasEditorOptions returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasEditorOptions() bool {
	if o != nil && !IsNil(o.EditorOptions) {
		return true
	}

	return false
}

// SetEditorOptions gets a reference to the given SubEditorOptions and assigns it to the EditorOptions field.
func (o *TemplateCreateEmbeddedRequest) SetEditorOptions(v SubEditorOptions) {
	o.EditorOptions = &v
}

// GetFieldOptions returns the FieldOptions field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetFieldOptions() SubFieldOptions {
	if o == nil || IsNil(o.FieldOptions) {
		var ret SubFieldOptions
		return ret
	}
	return *o.FieldOptions
}

// GetFieldOptionsOk returns a tuple with the FieldOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetFieldOptionsOk() (*SubFieldOptions, bool) {
	if o == nil || IsNil(o.FieldOptions) {
		return nil, false
	}
	return o.FieldOptions, true
}

// HasFieldOptions returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasFieldOptions() bool {
	if o != nil && !IsNil(o.FieldOptions) {
		return true
	}

	return false
}

// SetFieldOptions gets a reference to the given SubFieldOptions and assigns it to the FieldOptions field.
func (o *TemplateCreateEmbeddedRequest) SetFieldOptions(v SubFieldOptions) {
	o.FieldOptions = &v
}

// GetForceSignerRoles returns the ForceSignerRoles field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetForceSignerRoles() bool {
	if o == nil || IsNil(o.ForceSignerRoles) {
		var ret bool
		return ret
	}
	return *o.ForceSignerRoles
}

// GetForceSignerRolesOk returns a tuple with the ForceSignerRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetForceSignerRolesOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceSignerRoles) {
		return nil, false
	}
	return o.ForceSignerRoles, true
}

// HasForceSignerRoles returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasForceSignerRoles() bool {
	if o != nil && !IsNil(o.ForceSignerRoles) {
		return true
	}

	return false
}

// SetForceSignerRoles gets a reference to the given bool and assigns it to the ForceSignerRoles field.
func (o *TemplateCreateEmbeddedRequest) SetForceSignerRoles(v bool) {
	o.ForceSignerRoles = &v
}

// GetForceSubjectMessage returns the ForceSubjectMessage field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetForceSubjectMessage() bool {
	if o == nil || IsNil(o.ForceSubjectMessage) {
		var ret bool
		return ret
	}
	return *o.ForceSubjectMessage
}

// GetForceSubjectMessageOk returns a tuple with the ForceSubjectMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetForceSubjectMessageOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceSubjectMessage) {
		return nil, false
	}
	return o.ForceSubjectMessage, true
}

// HasForceSubjectMessage returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasForceSubjectMessage() bool {
	if o != nil && !IsNil(o.ForceSubjectMessage) {
		return true
	}

	return false
}

// SetForceSubjectMessage gets a reference to the given bool and assigns it to the ForceSubjectMessage field.
func (o *TemplateCreateEmbeddedRequest) SetForceSubjectMessage(v bool) {
	o.ForceSubjectMessage = &v
}

// GetFormFieldGroups returns the FormFieldGroups field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetFormFieldGroups() []SubFormFieldGroup {
	if o == nil || IsNil(o.FormFieldGroups) {
		var ret []SubFormFieldGroup
		return ret
	}
	return o.FormFieldGroups
}

// GetFormFieldGroupsOk returns a tuple with the FormFieldGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetFormFieldGroupsOk() ([]SubFormFieldGroup, bool) {
	if o == nil || IsNil(o.FormFieldGroups) {
		return nil, false
	}
	return o.FormFieldGroups, true
}

// HasFormFieldGroups returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasFormFieldGroups() bool {
	if o != nil && !IsNil(o.FormFieldGroups) {
		return true
	}

	return false
}

// SetFormFieldGroups gets a reference to the given []SubFormFieldGroup and assigns it to the FormFieldGroups field.
func (o *TemplateCreateEmbeddedRequest) SetFormFieldGroups(v []SubFormFieldGroup) {
	o.FormFieldGroups = v
}

// GetFormFieldRules returns the FormFieldRules field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetFormFieldRules() []SubFormFieldRule {
	if o == nil || IsNil(o.FormFieldRules) {
		var ret []SubFormFieldRule
		return ret
	}
	return o.FormFieldRules
}

// GetFormFieldRulesOk returns a tuple with the FormFieldRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetFormFieldRulesOk() ([]SubFormFieldRule, bool) {
	if o == nil || IsNil(o.FormFieldRules) {
		return nil, false
	}
	return o.FormFieldRules, true
}

// HasFormFieldRules returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasFormFieldRules() bool {
	if o != nil && !IsNil(o.FormFieldRules) {
		return true
	}

	return false
}

// SetFormFieldRules gets a reference to the given []SubFormFieldRule and assigns it to the FormFieldRules field.
func (o *TemplateCreateEmbeddedRequest) SetFormFieldRules(v []SubFormFieldRule) {
	o.FormFieldRules = v
}

// GetFormFieldsPerDocument returns the FormFieldsPerDocument field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetFormFieldsPerDocument() []SubFormFieldsPerDocumentBase {
	if o == nil || IsNil(o.FormFieldsPerDocument) {
		var ret []SubFormFieldsPerDocumentBase
		return ret
	}
	return o.FormFieldsPerDocument
}

// GetFormFieldsPerDocumentOk returns a tuple with the FormFieldsPerDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetFormFieldsPerDocumentOk() ([]SubFormFieldsPerDocumentBase, bool) {
	if o == nil || IsNil(o.FormFieldsPerDocument) {
		return nil, false
	}
	return o.FormFieldsPerDocument, true
}

// HasFormFieldsPerDocument returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasFormFieldsPerDocument() bool {
	if o != nil && !IsNil(o.FormFieldsPerDocument) {
		return true
	}

	return false
}

// SetFormFieldsPerDocument gets a reference to the given []SubFormFieldsPerDocumentBase and assigns it to the FormFieldsPerDocument field.
func (o *TemplateCreateEmbeddedRequest) SetFormFieldsPerDocument(v []SubFormFieldsPerDocumentBase) {
	o.FormFieldsPerDocument = v
}

// GetMergeFields returns the MergeFields field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetMergeFields() []SubMergeField {
	if o == nil || IsNil(o.MergeFields) {
		var ret []SubMergeField
		return ret
	}
	return o.MergeFields
}

// GetMergeFieldsOk returns a tuple with the MergeFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetMergeFieldsOk() ([]SubMergeField, bool) {
	if o == nil || IsNil(o.MergeFields) {
		return nil, false
	}
	return o.MergeFields, true
}

// HasMergeFields returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasMergeFields() bool {
	if o != nil && !IsNil(o.MergeFields) {
		return true
	}

	return false
}

// SetMergeFields gets a reference to the given []SubMergeField and assigns it to the MergeFields field.
func (o *TemplateCreateEmbeddedRequest) SetMergeFields(v []SubMergeField) {
	o.MergeFields = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *TemplateCreateEmbeddedRequest) SetMessage(v string) {
	o.Message = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *TemplateCreateEmbeddedRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetShowPreview returns the ShowPreview field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetShowPreview() bool {
	if o == nil || IsNil(o.ShowPreview) {
		var ret bool
		return ret
	}
	return *o.ShowPreview
}

// GetShowPreviewOk returns a tuple with the ShowPreview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetShowPreviewOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowPreview) {
		return nil, false
	}
	return o.ShowPreview, true
}

// HasShowPreview returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasShowPreview() bool {
	if o != nil && !IsNil(o.ShowPreview) {
		return true
	}

	return false
}

// SetShowPreview gets a reference to the given bool and assigns it to the ShowPreview field.
func (o *TemplateCreateEmbeddedRequest) SetShowPreview(v bool) {
	o.ShowPreview = &v
}

// GetShowProgressStepper returns the ShowProgressStepper field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetShowProgressStepper() bool {
	if o == nil || IsNil(o.ShowProgressStepper) {
		var ret bool
		return ret
	}
	return *o.ShowProgressStepper
}

// GetShowProgressStepperOk returns a tuple with the ShowProgressStepper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetShowProgressStepperOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowProgressStepper) {
		return nil, false
	}
	return o.ShowProgressStepper, true
}

// HasShowProgressStepper returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasShowProgressStepper() bool {
	if o != nil && !IsNil(o.ShowProgressStepper) {
		return true
	}

	return false
}

// SetShowProgressStepper gets a reference to the given bool and assigns it to the ShowProgressStepper field.
func (o *TemplateCreateEmbeddedRequest) SetShowProgressStepper(v bool) {
	o.ShowProgressStepper = &v
}

// GetSignerRoles returns the SignerRoles field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetSignerRoles() []SubTemplateRole {
	if o == nil || IsNil(o.SignerRoles) {
		var ret []SubTemplateRole
		return ret
	}
	return o.SignerRoles
}

// GetSignerRolesOk returns a tuple with the SignerRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetSignerRolesOk() ([]SubTemplateRole, bool) {
	if o == nil || IsNil(o.SignerRoles) {
		return nil, false
	}
	return o.SignerRoles, true
}

// HasSignerRoles returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasSignerRoles() bool {
	if o != nil && !IsNil(o.SignerRoles) {
		return true
	}

	return false
}

// SetSignerRoles gets a reference to the given []SubTemplateRole and assigns it to the SignerRoles field.
func (o *TemplateCreateEmbeddedRequest) SetSignerRoles(v []SubTemplateRole) {
	o.SignerRoles = v
}

// GetSkipMeNow returns the SkipMeNow field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetSkipMeNow() bool {
	if o == nil || IsNil(o.SkipMeNow) {
		var ret bool
		return ret
	}
	return *o.SkipMeNow
}

// GetSkipMeNowOk returns a tuple with the SkipMeNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetSkipMeNowOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipMeNow) {
		return nil, false
	}
	return o.SkipMeNow, true
}

// HasSkipMeNow returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasSkipMeNow() bool {
	if o != nil && !IsNil(o.SkipMeNow) {
		return true
	}

	return false
}

// SetSkipMeNow gets a reference to the given bool and assigns it to the SkipMeNow field.
func (o *TemplateCreateEmbeddedRequest) SetSkipMeNow(v bool) {
	o.SkipMeNow = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *TemplateCreateEmbeddedRequest) SetSubject(v string) {
	o.Subject = &v
}

// GetTestMode returns the TestMode field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetTestMode() bool {
	if o == nil || IsNil(o.TestMode) {
		var ret bool
		return ret
	}
	return *o.TestMode
}

// GetTestModeOk returns a tuple with the TestMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetTestModeOk() (*bool, bool) {
	if o == nil || IsNil(o.TestMode) {
		return nil, false
	}
	return o.TestMode, true
}

// HasTestMode returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasTestMode() bool {
	if o != nil && !IsNil(o.TestMode) {
		return true
	}

	return false
}

// SetTestMode gets a reference to the given bool and assigns it to the TestMode field.
func (o *TemplateCreateEmbeddedRequest) SetTestMode(v bool) {
	o.TestMode = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *TemplateCreateEmbeddedRequest) SetTitle(v string) {
	o.Title = &v
}

// GetUsePreexistingFields returns the UsePreexistingFields field value if set, zero value otherwise.
func (o *TemplateCreateEmbeddedRequest) GetUsePreexistingFields() bool {
	if o == nil || IsNil(o.UsePreexistingFields) {
		var ret bool
		return ret
	}
	return *o.UsePreexistingFields
}

// GetUsePreexistingFieldsOk returns a tuple with the UsePreexistingFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TemplateCreateEmbeddedRequest) GetUsePreexistingFieldsOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePreexistingFields) {
		return nil, false
	}
	return o.UsePreexistingFields, true
}

// HasUsePreexistingFields returns a boolean if a field has been set.
func (o *TemplateCreateEmbeddedRequest) HasUsePreexistingFields() bool {
	if o != nil && !IsNil(o.UsePreexistingFields) {
		return true
	}

	return false
}

// SetUsePreexistingFields gets a reference to the given bool and assigns it to the UsePreexistingFields field.
func (o *TemplateCreateEmbeddedRequest) SetUsePreexistingFields(v bool) {
	o.UsePreexistingFields = &v
}

func (o TemplateCreateEmbeddedRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TemplateCreateEmbeddedRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.FileUrls) {
		toSerialize["file_urls"] = o.FileUrls
	}
	if !IsNil(o.AllowCcs) {
		toSerialize["allow_ccs"] = o.AllowCcs
	}
	if !IsNil(o.AllowReassign) {
		toSerialize["allow_reassign"] = o.AllowReassign
	}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.CcRoles) {
		toSerialize["cc_roles"] = o.CcRoles
	}
	toSerialize["client_id"] = o.ClientId
	if !IsNil(o.EditorOptions) {
		toSerialize["editor_options"] = o.EditorOptions
	}
	if !IsNil(o.FieldOptions) {
		toSerialize["field_options"] = o.FieldOptions
	}
	if !IsNil(o.ForceSignerRoles) {
		toSerialize["force_signer_roles"] = o.ForceSignerRoles
	}
	if !IsNil(o.ForceSubjectMessage) {
		toSerialize["force_subject_message"] = o.ForceSubjectMessage
	}
	if !IsNil(o.FormFieldGroups) {
		toSerialize["form_field_groups"] = o.FormFieldGroups
	}
	if !IsNil(o.FormFieldRules) {
		toSerialize["form_field_rules"] = o.FormFieldRules
	}
	if !IsNil(o.FormFieldsPerDocument) {
		toSerialize["form_fields_per_document"] = o.FormFieldsPerDocument
	}
	if !IsNil(o.MergeFields) {
		toSerialize["merge_fields"] = o.MergeFields
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.ShowPreview) {
		toSerialize["show_preview"] = o.ShowPreview
	}
	if !IsNil(o.ShowProgressStepper) {
		toSerialize["show_progress_stepper"] = o.ShowProgressStepper
	}
	if !IsNil(o.SignerRoles) {
		toSerialize["signer_roles"] = o.SignerRoles
	}
	if !IsNil(o.SkipMeNow) {
		toSerialize["skip_me_now"] = o.SkipMeNow
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.TestMode) {
		toSerialize["test_mode"] = o.TestMode
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.UsePreexistingFields) {
		toSerialize["use_preexisting_fields"] = o.UsePreexistingFields
	}
	return toSerialize, nil
}

type NullableTemplateCreateEmbeddedRequest struct {
	value *TemplateCreateEmbeddedRequest
	isSet bool
}

func (v NullableTemplateCreateEmbeddedRequest) Get() *TemplateCreateEmbeddedRequest {
	return v.value
}

func (v *NullableTemplateCreateEmbeddedRequest) Set(val *TemplateCreateEmbeddedRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTemplateCreateEmbeddedRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTemplateCreateEmbeddedRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemplateCreateEmbeddedRequest(val *TemplateCreateEmbeddedRequest) *NullableTemplateCreateEmbeddedRequest {
	return &NullableTemplateCreateEmbeddedRequest{value: val, isSet: true}
}

func (v NullableTemplateCreateEmbeddedRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemplateCreateEmbeddedRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


