/*
Dropbox Sign API

Dropbox Sign v3 API

API version: 3.0.0
Contact: apisupport@hellosign.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SubFormFieldsPerDocumentFontEnum the model 'SubFormFieldsPerDocumentFontEnum'
type SubFormFieldsPerDocumentFontEnum string

// List of SubFormFieldsPerDocumentFontEnum
const (
	HELVETICA SubFormFieldsPerDocumentFontEnum = "helvetica"
	ARIAL SubFormFieldsPerDocumentFontEnum = "arial"
	COURIER SubFormFieldsPerDocumentFontEnum = "courier"
	CALIBRI SubFormFieldsPerDocumentFontEnum = "calibri"
	CAMBRIA SubFormFieldsPerDocumentFontEnum = "cambria"
	GEORGIA SubFormFieldsPerDocumentFontEnum = "georgia"
	TIMES SubFormFieldsPerDocumentFontEnum = "times"
	TREBUCHET SubFormFieldsPerDocumentFontEnum = "trebuchet"
	VERDANA SubFormFieldsPerDocumentFontEnum = "verdana"
	ROBOTO SubFormFieldsPerDocumentFontEnum = "roboto"
	ROBOTO_MONO SubFormFieldsPerDocumentFontEnum = "robotoMono"
	NOTO_SANS SubFormFieldsPerDocumentFontEnum = "notoSans"
	NOTO_SERIF SubFormFieldsPerDocumentFontEnum = "notoSerif"
	NOTO_CJK_JP_REGULAR SubFormFieldsPerDocumentFontEnum = "notoCJK-JP-Regular"
	NOTO_HEBREW_REGULAR SubFormFieldsPerDocumentFontEnum = "notoHebrew-Regular"
	NOTO_SAN_THAI_MERGED SubFormFieldsPerDocumentFontEnum = "notoSanThaiMerged"
)

// All allowed values of SubFormFieldsPerDocumentFontEnum enum
var AllowedSubFormFieldsPerDocumentFontEnumEnumValues = []SubFormFieldsPerDocumentFontEnum{
	"helvetica",
	"arial",
	"courier",
	"calibri",
	"cambria",
	"georgia",
	"times",
	"trebuchet",
	"verdana",
	"roboto",
	"robotoMono",
	"notoSans",
	"notoSerif",
	"notoCJK-JP-Regular",
	"notoHebrew-Regular",
	"notoSanThaiMerged",
}

func (v *SubFormFieldsPerDocumentFontEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubFormFieldsPerDocumentFontEnum(value)
	for _, existing := range AllowedSubFormFieldsPerDocumentFontEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubFormFieldsPerDocumentFontEnum", value)
}

// NewSubFormFieldsPerDocumentFontEnumFromValue returns a pointer to a valid SubFormFieldsPerDocumentFontEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubFormFieldsPerDocumentFontEnumFromValue(v string) (*SubFormFieldsPerDocumentFontEnum, error) {
	ev := SubFormFieldsPerDocumentFontEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubFormFieldsPerDocumentFontEnum: valid values are %v", v, AllowedSubFormFieldsPerDocumentFontEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubFormFieldsPerDocumentFontEnum) IsValid() bool {
	for _, existing := range AllowedSubFormFieldsPerDocumentFontEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubFormFieldsPerDocumentFontEnum value
func (v SubFormFieldsPerDocumentFontEnum) Ptr() *SubFormFieldsPerDocumentFontEnum {
	return &v
}

type NullableSubFormFieldsPerDocumentFontEnum struct {
	value *SubFormFieldsPerDocumentFontEnum
	isSet bool
}

func (v NullableSubFormFieldsPerDocumentFontEnum) Get() *SubFormFieldsPerDocumentFontEnum {
	return v.value
}

func (v *NullableSubFormFieldsPerDocumentFontEnum) Set(val *SubFormFieldsPerDocumentFontEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSubFormFieldsPerDocumentFontEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSubFormFieldsPerDocumentFontEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubFormFieldsPerDocumentFontEnum(val *SubFormFieldsPerDocumentFontEnum) *NullableSubFormFieldsPerDocumentFontEnum {
	return &NullableSubFormFieldsPerDocumentFontEnum{value: val, isSet: true}
}

func (v NullableSubFormFieldsPerDocumentFontEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubFormFieldsPerDocumentFontEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

